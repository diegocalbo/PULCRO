import React, { useState } from 'react';
import { Plus, Search, Edit, Trash2, Building, Phone, Mail, MapPin, Download, Copy } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Textarea } from '@/components/ui/textarea';
import { useClientes } from '@/hooks/useData';
import { Cliente } from '@/types';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import { formatPhoneAR, formatCUITAR } from '@/lib/formatters';

interface ClienteFormData {
  nombre: string;
  empresa: string;
  telefono: string;
  email: string;
  direccion: string;
  cuit: string;
  contacto: string;
}

const defaultFormData: ClienteFormData = {
  nombre: '',
  empresa: '',
  telefono: '',
  email: '',
  direccion: '',
  cuit: '',
  contacto: ''
};

export const Clientes: React.FC = () => {
  const [search, setSearch] = useState('');
  const [formData, setFormData] = useState<ClienteFormData>(defaultFormData);
  const [editingCliente, setEditingCliente] = useState<Cliente | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [clienteToDelete, setClienteToDelete] = useState<Cliente | null>(null);

  const { clientes, loading, createCliente, updateCliente, deleteCliente } = useClientes();
  const { toast } = useToast();
  const { user } = useAuth();

  // Filter clients
  const filteredClientes = clientes.filter(cliente =>
    cliente.nombre.toLowerCase().includes(search.toLowerCase()) ||
    cliente.empresa?.toLowerCase().includes(search.toLowerCase()) ||
    cliente.email?.toLowerCase().includes(search.toLowerCase())
  );

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      if (editingCliente) {
        updateCliente(editingCliente.id, formData);
        toast({
          title: "Cliente actualizado",
          description: "Los datos del cliente se han actualizado correctamente.",
        });
      } else {
        createCliente(formData);
        toast({
          title: "Cliente creado",
          description: "El nuevo cliente se ha registrado correctamente.",
        });
      }
      
      handleCloseDialog();
    } catch (error) {
      toast({
        title: "Error",
        description: "Ocurrió un error al guardar el cliente.",
        variant: "destructive",
      });
    }
  };

  const handleEdit = (cliente: Cliente) => {
    setFormData({
      nombre: cliente.nombre,
      empresa: cliente.empresa || '',
      telefono: cliente.telefono || '',
      email: cliente.email || '',
      direccion: cliente.direccion || '',
      cuit: cliente.cuit || '',
      contacto: cliente.contacto || ''
    });
    setEditingCliente(cliente);
    setIsDialogOpen(true);
  };

  const handleDelete = (cliente: Cliente) => {
    setClienteToDelete(cliente);
    setIsDeleteDialogOpen(true);
  };

  const handleDuplicate = (cliente: Cliente) => {
    if (!user || user.nivel !== 'admin') {
      toast({
        title: "Acceso denegado",
        description: "Solo los administradores pueden duplicar clientes.",
        variant: "destructive",
      });
      return;
    }

    // Create a copy with modified name
    const clienteCopia = {
      ...cliente,
      id: '', // Will be generated by createCliente
      nombre: `${cliente.nombre} (Copia)`,
      fechaCreacion: new Date().toISOString(),
      fechaActualizacion: new Date().toISOString()
    };

    // Remove the id to create a new client
    const { id, fechaCreacion, fechaActualizacion, ...clienteData } = clienteCopia;
    
    try {
      createCliente(clienteData);
      toast({
        title: "Cliente duplicado",
        description: `Se ha creado una copia de ${cliente.nombre}`,
      });
    } catch (error) {
      toast({
        title: "Error al duplicar",
        description: "No se pudo duplicar el cliente. Intenta nuevamente.",
        variant: "destructive",
      });
    }
  };

  const confirmDelete = () => {
    if (clienteToDelete) {
      deleteCliente(clienteToDelete.id);
      toast({
        title: "Cliente eliminado",
        description: "El cliente ha sido eliminado correctamente.",
      });
      setIsDeleteDialogOpen(false);
      setClienteToDelete(null);
    }
  };

  const handleCloseDialog = () => {
    setIsDialogOpen(false);
    setEditingCliente(null);
    setFormData(defaultFormData);
  };

  const handleInputChange = (field: keyof ClienteFormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const exportToExcel = () => {
    if (!user || user.nivel !== 'admin') {
      toast({
        title: "Acceso denegado",
        description: "Solo los administradores pueden exportar datos.",
        variant: "destructive",
      });
      return;
    }

    try {
      // Create CSV content
      const headers = ['Nombre', 'Empresa', 'Contacto', 'Teléfono', 'Email', 'Dirección', 'CUIT'];
      const csvContent = [
        headers.join(','),
        ...clientes.map(cliente => [
          `"${cliente.nombre || ''}"`,
          `"${cliente.empresa || ''}"`,
          `"${cliente.contacto || ''}"`,
          `"${formatPhoneAR(cliente.telefono || '')}"`,
          `"${cliente.email || ''}"`,
          `"${cliente.direccion || ''}"`,
          `"${formatCUITAR(cliente.cuit || '')}"`
        ].join(','))
      ].join('\n');

      // Create and download file
      const blob = new Blob(['\uFEFF' + csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      
      const date = new Date().toISOString().split('T')[0];
      link.setAttribute('download', `PULCRO_Clientes_${date}.csv`);
      link.style.visibility = 'hidden';
      
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      toast({
        title: "Exportación exitosa",
        description: `Se han exportado ${clientes.length} clientes a Excel.`,
      });
    } catch (error) {
      toast({
        title: "Error en exportación",
        description: "No se pudo exportar el archivo. Intenta nuevamente.",
        variant: "destructive",
      });
    }
  };

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-gray-900">Gestión de Clientes</h1>
          <p className="text-gray-600">Administra la información de tus clientes</p>
        </div>
        <div className="flex space-x-2">
          {user?.nivel === 'admin' && (
            <Button 
              onClick={exportToExcel} 
              variant="outline"
              className="bg-green-50 border-green-200 text-green-700 hover:bg-green-100"
            >
              <Download className="h-4 w-4 mr-2" />
              Exportar Excel
            </Button>
          )}
          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
              <Button onClick={() => setIsDialogOpen(true)}>
                <Plus className="h-4 w-4 mr-2" />
                Nuevo Cliente
              </Button>
            </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>
                {editingCliente ? 'Editar Cliente' : 'Nuevo Cliente'}
              </DialogTitle>
              <DialogDescription>
                {editingCliente 
                  ? 'Modifica los datos del cliente'
                  : 'Ingresa los datos del nuevo cliente'}
              </DialogDescription>
            </DialogHeader>
            
            <form onSubmit={handleSubmit} className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="nombre">Nombre *</Label>
                  <Input
                    id="nombre"
                    value={formData.nombre}
                    onChange={(e) => handleInputChange('nombre', e.target.value)}
                    placeholder="Nombre del cliente"
                    required
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="empresa">Empresa</Label>
                  <Input
                    id="empresa"
                    value={formData.empresa}
                    onChange={(e) => handleInputChange('empresa', e.target.value)}
                    placeholder="Nombre de la empresa"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="contacto">Persona de Contacto</Label>
                  <Input
                    id="contacto"
                    value={formData.contacto}
                    onChange={(e) => handleInputChange('contacto', e.target.value)}
                    placeholder="Persona de contacto"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="telefono">Teléfono</Label>
                  <Input
                    id="telefono"
                    value={formData.telefono}
                    onChange={(e) => handleInputChange('telefono', e.target.value)}
                    placeholder="+5411-XXXX-XXXX"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    value={formData.email}
                    onChange={(e) => handleInputChange('email', e.target.value)}
                    placeholder="email@ejemplo.com"
                  />
                </div>
                
                <div className="space-y-2">
                  <Label htmlFor="cuit">CUIT/NIF</Label>
                  <Input
                    id="cuit"
                    value={formData.cuit}
                    onChange={(e) => handleInputChange('cuit', e.target.value)}
                    placeholder="XX-XXXXXXXX-X"
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="direccion">Dirección</Label>
                <Textarea
                  id="direccion"
                  value={formData.direccion}
                  onChange={(e) => handleInputChange('direccion', e.target.value)}
                  placeholder="Dirección completa del cliente"
                  rows={3}
                />
              </div>
              
              <div className="flex justify-end space-x-2 pt-4">
                <Button type="button" variant="outline" onClick={handleCloseDialog}>
                  Cancelar
                </Button>
                <Button type="submit">
                  {editingCliente ? 'Actualizar' : 'Crear'} Cliente
                </Button>
              </div>
            </form>
          </DialogContent>
        </Dialog>
        </div>
      </div>

      {/* Search */}
      <Card>
        <CardContent className="p-6">
          <div className="flex items-center space-x-2">
            <Search className="h-4 w-4 text-gray-400" />
            <Input
              placeholder="Buscar por nombre, empresa o email..."
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              className="max-w-sm"
            />
          </div>
        </CardContent>
      </Card>

      {/* Clients list */}
      <Card>
        <CardHeader>
          <CardTitle>Lista de Clientes ({filteredClientes.length})</CardTitle>
          <CardDescription>
            Información detallada de todos tus clientes
          </CardDescription>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="text-center py-8">
              <p className="text-gray-500">Cargando clientes...</p>
            </div>
          ) : filteredClientes.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">
                {search ? 'No se encontraron clientes que coincidan con tu búsqueda.' : 'No hay clientes registrados.'}
              </p>
            </div>
          ) : (
            <div className="space-y-4">
              {/* Mobile cards view */}
              <div className="md:hidden space-y-4">
                {filteredClientes.map((cliente) => (
                  <Card key={cliente.id} className="p-4">
                    <div className="space-y-3">
                      <div className="flex items-start justify-between">
                        <div>
                          <h3 className="font-semibold text-lg">{cliente.nombre}</h3>
                          {cliente.empresa && (
                            <p className="text-gray-600 flex items-center">
                              <Building className="h-4 w-4 mr-1" />
                              {cliente.empresa}
                            </p>
                          )}
                        </div>
                        <div className="flex space-x-2">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleEdit(cliente)}
                          >
                            <Edit className="h-4 w-4" />
                          </Button>
                          {user?.nivel === 'admin' && (
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleDuplicate(cliente)}
                              className="text-blue-600 hover:text-blue-700"
                              title="Duplicar cliente"
                            >
                              <Copy className="h-4 w-4" />
                            </Button>
                          )}
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleDelete(cliente)}
                            className="text-red-600 hover:text-red-700"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      
                      {cliente.contacto && (
                        <p className="text-sm text-gray-600">
                          <strong>Contacto:</strong> {cliente.contacto}
                        </p>
                      )}
                      
                      <div className="space-y-1">
                        {cliente.telefono && (
                          <p className="text-sm text-gray-600 flex items-center">
                            <Phone className="h-4 w-4 mr-2" />
                            {cliente.telefono}
                          </p>
                        )}
                        {cliente.email && (
                          <p className="text-sm text-gray-600 flex items-center">
                            <Mail className="h-4 w-4 mr-2" />
                            {cliente.email}
                          </p>
                        )}
                        {cliente.direccion && (
                          <p className="text-sm text-gray-600 flex items-start">
                            <MapPin className="h-4 w-4 mr-2 mt-0.5" />
                            {cliente.direccion}
                          </p>
                        )}
                      </div>
                    </div>
                  </Card>
                ))}
              </div>

              {/* Desktop table view */}
              <div className="hidden md:block">
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Cliente</TableHead>
                      <TableHead>Empresa</TableHead>
                      <TableHead>Contacto</TableHead>
                      <TableHead>Teléfono</TableHead>
                      <TableHead>Email</TableHead>
                      <TableHead>Acciones</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {filteredClientes.map((cliente) => (
                      <TableRow key={cliente.id}>
                        <TableCell className="font-medium">
                          <div>
                            <p className="font-semibold">{cliente.nombre}</p>
                            {cliente.direccion && (
                              <p className="text-sm text-gray-500 truncate max-w-xs">
                                {cliente.direccion}
                              </p>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>{cliente.empresa || '-'}</TableCell>
                        <TableCell>{cliente.contacto || '-'}</TableCell>
                        <TableCell>{cliente.telefono || '-'}</TableCell>
                        <TableCell>{cliente.email || '-'}</TableCell>
                        <TableCell>
                          <div className="flex space-x-2">
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleEdit(cliente)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            {user?.nivel === 'admin' && (
                              <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => handleDuplicate(cliente)}
                                className="text-blue-600 hover:text-blue-700"
                                title="Duplicar cliente"
                              >
                                <Copy className="h-4 w-4" />
                              </Button>
                            )}
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => handleDelete(cliente)}
                              className="text-red-600 hover:text-red-700"
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Delete confirmation dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirmar Eliminación</DialogTitle>
            <DialogDescription>
              ¿Estás seguro de que quieres eliminar al cliente "{clienteToDelete?.nombre}"?
              Esta acción no se puede deshacer.
            </DialogDescription>
          </DialogHeader>
          <div className="flex justify-end space-x-2">
            <Button variant="outline" onClick={() => setIsDeleteDialogOpen(false)}>
              Cancelar
            </Button>
            <Button variant="destructive" onClick={confirmDelete}>
              Eliminar
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
};

export default Clientes;
